{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1DWbIv82ThQKwrZ9sSDnxG57HA1TSgV_E","timestamp":1702381351957},{"file_id":"1XPu6XlmtwqbEqElqdXOEPJZGsQf6TVtL","timestamp":1670174471818},{"file_id":"1Qr-PfNKJHuThJcJycAx5VqJSSuk_rzay","timestamp":1663343523396},{"file_id":"1VbdbDGysiZggqh2X2vhPCgG0JzsqsPfg","timestamp":1663245037918}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"5_eFZpeoK7k2"},"source":["# Numpy\n","### Если задания покажутся сложными, рекомендую пройти краткий курс по основам numpy [ссылка1](https://stepik.org/lesson/241329/step/1?unit=213910), [ссылка2](https://stepik.org/lesson/16462/step/1?unit=4283)"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bfssiR61mf2s","executionInfo":{"status":"ok","timestamp":1702394257668,"user_tz":-300,"elapsed":15300,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}},"outputId":"5f397b4b-a6e9-44d0-ff5d-6478245409e9"},"execution_count":97,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"YEJ8DQ4QK7kx","executionInfo":{"status":"ok","timestamp":1702394171328,"user_tz":-300,"elapsed":244,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}}},"source":["import numpy as np\n","import random\n","import scipy.stats as sps\n","import cv2\n"],"execution_count":76,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hYXhVX0eK7k2"},"source":["### Задание 1\n","В первой задаче вам предлагается перемножить две квадратные матрицы двумя способами -- без использования пакета ***numpy*** и с ним."]},{"cell_type":"code","metadata":{"id":"zJR8EANzK7k3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702394171702,"user_tz":-300,"elapsed":2,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}},"outputId":"36265911-1fa0-420d-a5b3-28586354df56"},"source":["# Для генерации матриц используем фукнцию random -- она используется для генерации случайных объектов\n","# функция sample создает случайную выборку. В качестве аргумента ей передается кортеж (i,j),\n","# здесь i -- число строк, j -- число столбцов.\n","a = np.random.sample((100, 100))\n","b = np.random.sample((100, 100))\n","# выведите размерность (ранг) каждой матрицы с помощью функции ndim.\n","# Используйте функцию shape, что она вывела?\n","# ========\n","print(\"ранг a =\",a.ndim, \"\\nранг b =\", b.ndim)\n","print(\"размер матрицы a =\",a.shape,\"\\nразмер матрицы b =\",b.shape)\n","# ========\n","print(a)\n","print(b)"],"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["ранг a = 2 \n","ранг b = 2\n","размер матрицы a = (100, 100) \n","размер матрицы b = (100, 100)\n","[[0.72932388 0.09930187 0.06390837 ... 0.18625523 0.23339145 0.74617883]\n"," [0.27873848 0.50794998 0.56449849 ... 0.75347597 0.4653561  0.96512133]\n"," [0.06128437 0.72545132 0.38168211 ... 0.22593769 0.92335837 0.24509565]\n"," ...\n"," [0.78162423 0.93411067 0.38997072 ... 0.93117743 0.84183383 0.34562878]\n"," [0.30968722 0.5607739  0.00403486 ... 0.12272423 0.19745197 0.35528269]\n"," [0.11495387 0.44474604 0.87046914 ... 0.09628918 0.34738767 0.6969888 ]]\n","[[0.98041435 0.56018206 0.46550297 ... 0.16192203 0.61369517 0.8877599 ]\n"," [0.78739784 0.34274267 0.03216169 ... 0.44376055 0.24368985 0.3976673 ]\n"," [0.72504896 0.74193138 0.45586549 ... 0.05134623 0.98859147 0.81761772]\n"," ...\n"," [0.18495631 0.79471082 0.61282589 ... 0.196289   0.50883661 0.5869669 ]\n"," [0.01147102 0.32481264 0.38221924 ... 0.00696167 0.64772458 0.02448467]\n"," [0.46705386 0.31835021 0.96576337 ... 0.0554166  0.37231898 0.72531562]]\n"]}]},{"cell_type":"markdown","source":["Без использования numpy"],"metadata":{"id":"Ylmyxw_TQN9c"}},{"cell_type":"code","metadata":{"id":"bkWCI4TPK7k8","executionInfo":{"status":"ok","timestamp":1702394171702,"user_tz":-300,"elapsed":1,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}}},"source":["def mult(a, b):\n","    result = []\n","    for i in range(len(a)):\n","        row = []\n","        for j in range(len(a)):\n","            elem = 0\n","            for k in range(len(a)):\n","                elem += a[i, k] * b[k,j]\n","            row.append(elem)\n","        result.append(row)\n","    return result"],"execution_count":78,"outputs":[]},{"cell_type":"markdown","source":["C использованием numpy"],"metadata":{"id":"J6stNvzmQa61"}},{"cell_type":"code","metadata":{"id":"IIgYD1W5K7lB","executionInfo":{"status":"ok","timestamp":1702394171702,"user_tz":-300,"elapsed":1,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}}},"source":["def np_mult(a, b):\n","    result = np.dot(a, b)\n","    return result"],"execution_count":79,"outputs":[]},{"cell_type":"code","metadata":{"id":"tktkYzUHK7lE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702394172370,"user_tz":-300,"elapsed":669,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}},"outputId":"a080ae6d-fc05-4bb7-bcab-7548dafb4e06"},"source":["%%time\n","# засечем время работы функции без NumPy\n","M1 = mult(a, b)"],"execution_count":80,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 467 ms, sys: 0 ns, total: 467 ms\n","Wall time: 474 ms\n"]}]},{"cell_type":"code","metadata":{"id":"TmD0adgHK7lK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702394172371,"user_tz":-300,"elapsed":8,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}},"outputId":"d0022802-cbfe-4194-c98c-3c0f51771ac1"},"source":["%%time\n","# засечем время работы функции с NumPy\n","M2 = np_mult(a, b)"],"execution_count":81,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 4.59 ms, sys: 1.11 ms, total: 5.7 ms\n","Wall time: 5.98 ms\n"]}]},{"cell_type":"code","metadata":{"id":"oftqyANQK7lS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702394172371,"user_tz":-300,"elapsed":7,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}},"outputId":"44b39985-c6b3-4833-e10f-36081edb0ae2"},"source":["# проверим корректность\n","np.abs(np.array(M1) - M2).sum()"],"execution_count":82,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.532285409666656e-11"]},"metadata":{},"execution_count":82}]},{"cell_type":"markdown","metadata":{"id":"2itTyTlcaHAu"},"source":["### Задание 2"]},{"cell_type":"markdown","metadata":{"id":"BCemQSq-aEbO"},"source":["Вам подаются на вход два вектора `a` и `b` в трехмерном пространстве. Заполните их случайными числами. Реализуйте их скалярное произведение с помощью  `NumPy` и без. Засеките время работы, как это показано в заданиях выше."]},{"cell_type":"code","metadata":{"id":"lWhr_gPSZ9o_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702394172371,"user_tz":-300,"elapsed":6,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}},"outputId":"525e8e7e-c2fb-45c0-f2c7-5ad7d9449f12"},"source":["a = np.random.sample((1, 3))\n","a = list(a)[0]\n","b = np.random.sample((1, 3))\n","b = list(b)[0]\n","print(a, b)"],"execution_count":83,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.72694501 0.98653812 0.53893326] [0.24094017 0.14763352 0.56450959]\n"]}]},{"cell_type":"code","metadata":{"id":"GjlkcHIWZ_ae","executionInfo":{"status":"ok","timestamp":1702394172371,"user_tz":-300,"elapsed":5,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}}},"source":["def scalar_product(a,b):\n","    s = 0\n","    for i in range(len(a)):\n","        s += a[i] * b[i];\n","    return s"],"execution_count":84,"outputs":[]},{"cell_type":"code","metadata":{"id":"C2M-OAp5Z_6a","executionInfo":{"status":"ok","timestamp":1702394172371,"user_tz":-300,"elapsed":5,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}}},"source":["def np_scalar_product(a,b):\n","    s = np.dot(a, b)\n","    return s"],"execution_count":85,"outputs":[]},{"cell_type":"code","metadata":{"id":"BOQfYf-2aCQJ","scrolled":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702394172371,"user_tz":-300,"elapsed":5,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}},"outputId":"d4a2df79-1e06-4354-82d2-8ea503eac681"},"source":["%time product_1 = scalar_product(a,b)\n","%time product_2 = np_scalar_product(a,b)\n","# проверим корректность:\n","np.abs(product_1 - product_2).sum()"],"execution_count":86,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 0 ns, sys: 23 µs, total: 23 µs\n","Wall time: 26.7 µs\n","CPU times: user 40 µs, sys: 5 µs, total: 45 µs\n","Wall time: 49.4 µs\n"]},{"output_type":"execute_result","data":{"text/plain":["0.0"]},"metadata":{},"execution_count":86}]},{"cell_type":"markdown","metadata":{"id":"NHaHu6q1K7mH"},"source":["Почему методы ***numpy*** оказываются эффективнее? Что вы можете сказать о скорости вычислений в NumPy?"]},{"cell_type":"markdown","metadata":{"id":"_A3p2s4eK7mI"},"source":["**Ответ:** Язык Python сам по себе не очень быстрый, а библиотека numpy написана на C"]},{"cell_type":"markdown","metadata":{"id":"StLAtJ-tQlfR"},"source":["------------------"]},{"cell_type":"markdown","metadata":{"id":"mJXeUuznK7lm"},"source":["### Задание 3\n","Напишите функцию, которая находим сумму четных диагональныех элементов квадратной матрицы. Если таких элементов нет, то вывести `0`."]},{"cell_type":"code","metadata":{"id":"MjxKxv-bQlfW","executionInfo":{"status":"ok","timestamp":1702394172371,"user_tz":-300,"elapsed":4,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}}},"source":["# функция, решающая задачу с помощью NumPy\n","def np_diag_2k(a):\n","    result = sum([m for m in np.diagonal(a) if m % 2 == 0])\n","    a1 = np.fliplr(a)\n","    result += sum([m for m in np.diagonal(a1) if m % 2 == 0])\n","    return result"],"execution_count":87,"outputs":[]},{"cell_type":"code","metadata":{"id":"h_oazhcNQlfZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702394172371,"user_tz":-300,"elapsed":4,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}},"outputId":"6a74d7eb-fea8-4292-aed4-77ce827ce829"},"source":["# зададим некоторую квадратную матрицу\n","a = np.random.randint(1, 10, size=(5, 5))\n","a"],"execution_count":88,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[4, 2, 5, 5, 1],\n","       [7, 3, 5, 2, 9],\n","       [6, 7, 7, 3, 7],\n","       [4, 6, 2, 7, 6],\n","       [5, 6, 2, 7, 4]])"]},"metadata":{},"execution_count":88}]},{"cell_type":"code","metadata":{"id":"_9jg1CuWQlfc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702394172371,"user_tz":-300,"elapsed":3,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}},"outputId":"0268c1e2-08c6-4fb1-992e-d83faee6fd2d"},"source":["%%time\n","# засечем время работы функции с NumPy\n","np_diag_2k(a)"],"execution_count":89,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 74 µs, sys: 11 µs, total: 85 µs\n","Wall time: 90.8 µs\n"]},{"output_type":"execute_result","data":{"text/plain":["16"]},"metadata":{},"execution_count":89}]},{"cell_type":"markdown","metadata":{"id":"D-N46M-tQlff"},"source":["### Задание 4\n","На вход дан двумерный массив $X$. Напишите функцию, которая для каждой строчки $x = (x_1, x_2, \\ldots, x_n)$ массива $X$  строит строчку $s = (s_1, s_2, \\ldots, s_n)$, где $s_k=\\frac{x_1+...+x_k}{k}$, а затем выдаёт массив из построенных строчек. Используйте библиотеку numpy (вам поможет функция cumsum). Выходом функции должен быть двумерный массив той же формы, что и $X$."]},{"cell_type":"code","metadata":{"id":"REgL39ksK7lr","executionInfo":{"status":"ok","timestamp":1702394172371,"user_tz":-300,"elapsed":3,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}}},"source":["# функция, решающая задачу с помощью NumPy\n","def np_sec_av(*A):\n","    result = []\n","    for i in range(len(A)):\n","        row = list(np.cumsum(A[i]))\n","        result.append(row)\n","    return result"],"execution_count":90,"outputs":[]},{"cell_type":"code","metadata":{"id":"HcVN8MagK7lw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702394172771,"user_tz":-300,"elapsed":403,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}},"outputId":"4bfffc3c-1e64-4e29-e220-11c33f137542"},"source":["# зададим некоторую последовательность и проверим ее на ваших функциях.\n","# функция должна работать ~ в 50 раз быстрее, чем без Numpy\n","A = sps.uniform.rvs(size=10**3)\n","print(A)\n","\n","%time S2 = np_sec_av(A)"],"execution_count":91,"outputs":[{"output_type":"stream","name":"stdout","text":["[5.86420158e-01 5.22932393e-01 8.65962464e-01 5.60128054e-01\n"," 2.03733763e-01 9.90965569e-02 9.56880201e-01 4.76690659e-01\n"," 2.19068228e-01 7.60666569e-01 6.01736582e-01 6.25544814e-01\n"," 8.04837997e-01 4.99832597e-01 3.35464717e-01 6.30958687e-01\n"," 1.12679256e-01 3.56124345e-01 4.92762251e-01 6.44804247e-02\n"," 6.66551374e-01 9.44072996e-01 5.28112488e-01 2.32723064e-01\n"," 4.33643932e-01 5.92853721e-01 9.98370039e-02 5.76778617e-01\n"," 5.51714502e-01 4.16880514e-01 4.81126585e-01 6.64203744e-02\n"," 6.05964932e-01 6.06990464e-01 8.18378870e-01 8.84393375e-01\n"," 9.15684027e-01 6.15733394e-01 7.55429035e-01 5.50458905e-01\n"," 7.69857743e-02 2.38206512e-01 4.04615841e-01 5.03200658e-01\n"," 3.23676128e-01 6.55951224e-02 3.81398497e-01 9.69650196e-01\n"," 2.78593801e-02 1.90669476e-01 6.44668872e-01 6.99195259e-01\n"," 6.26865875e-01 3.85506680e-01 6.27169487e-01 8.07663102e-01\n"," 7.50494166e-01 1.50917968e-01 2.83210488e-01 1.76054583e-02\n"," 2.49462016e-01 5.63004088e-01 5.67777133e-01 3.49325951e-01\n"," 8.42715688e-01 8.12584394e-02 3.73529935e-01 9.27843929e-01\n"," 5.81456654e-01 1.33504221e-01 1.52576477e-01 3.67382566e-01\n"," 3.63109581e-01 5.80401195e-01 2.56011309e-01 4.32269935e-01\n"," 3.34982783e-01 8.29121075e-01 2.56709531e-01 9.35809095e-01\n"," 1.20866254e-01 1.05982551e-01 9.93776678e-01 6.10490722e-01\n"," 5.19439153e-02 8.56608123e-01 3.81543207e-01 3.14873631e-01\n"," 8.37804297e-01 7.56395493e-01 8.92532818e-01 7.35271400e-01\n"," 3.96718146e-01 6.54533036e-01 1.75117062e-01 1.03961380e-01\n"," 9.20077377e-02 2.09990531e-01 1.28987709e-01 2.75886807e-01\n"," 3.22921702e-01 9.55437958e-01 2.74983272e-01 5.59851409e-01\n"," 7.91334482e-01 4.89255368e-01 6.65226356e-01 6.64985418e-01\n"," 8.69220552e-01 4.34005475e-01 7.79101750e-01 6.78080743e-01\n"," 7.66300117e-01 4.15976002e-01 2.80414918e-01 8.26698181e-01\n"," 7.22273072e-01 2.50330248e-01 6.61132944e-01 4.77073110e-01\n"," 1.62189746e-01 4.79293419e-01 7.68624008e-01 3.29154729e-01\n"," 9.19953689e-02 7.35329545e-02 6.88091218e-01 6.91069403e-02\n"," 3.09381624e-01 6.16056288e-01 5.32419559e-01 4.41537855e-01\n"," 9.97624374e-01 8.56078020e-01 7.55488242e-01 4.03447553e-01\n"," 5.48261561e-01 1.30207832e-01 3.37863042e-01 6.10217434e-01\n"," 3.81759783e-01 1.42460787e-01 6.92736097e-01 6.90303320e-01\n"," 9.38063925e-02 8.06165467e-01 6.21649197e-02 7.65016257e-01\n"," 4.35638869e-01 7.79113402e-01 8.96090777e-01 4.79215782e-01\n"," 3.14088284e-01 1.43737905e-01 7.24505775e-01 7.25174778e-02\n"," 7.79809337e-02 1.75862765e-01 4.02315095e-01 6.81761010e-01\n"," 8.72594667e-01 1.52124542e-01 3.86421711e-01 8.45155960e-01\n"," 6.31416646e-01 3.93163144e-01 5.54861861e-01 2.71133617e-01\n"," 4.27981748e-01 8.73623479e-01 5.29914977e-01 5.18422498e-01\n"," 7.82941781e-01 9.39083471e-02 9.90225472e-01 3.20771417e-01\n"," 9.97694009e-01 5.20922991e-01 5.46011543e-01 9.90526490e-01\n"," 5.37266747e-01 9.22826005e-01 2.74448669e-01 7.41236248e-01\n"," 1.84577575e-01 1.49475098e-01 7.10705489e-01 9.93431105e-01\n"," 5.26597342e-02 5.89265732e-01 1.03542138e-01 8.57874964e-01\n"," 2.36684739e-01 6.70196998e-01 2.38125001e-01 5.16148322e-01\n"," 9.70294521e-01 6.59558425e-01 7.76849086e-02 8.80999700e-01\n"," 6.69786887e-01 8.39100133e-01 4.31609475e-02 2.77457718e-01\n"," 8.18767830e-01 5.58967725e-01 9.53813753e-01 8.53593451e-01\n"," 3.31042954e-01 5.48696386e-01 1.25789969e-02 1.77879854e-01\n"," 7.75373004e-01 1.34731981e-01 6.79983219e-01 9.57488291e-01\n"," 2.82828035e-01 3.53849963e-01 3.68801477e-01 1.81888671e-02\n"," 7.13987566e-02 4.56285482e-01 6.35140892e-01 8.57694330e-03\n"," 2.62879097e-01 3.60128865e-02 9.43864704e-01 8.01527583e-01\n"," 3.02118277e-02 1.31784568e-01 5.66777886e-01 2.92860172e-01\n"," 7.49153441e-01 6.53567355e-01 4.55126394e-01 1.19657368e-02\n"," 3.41108886e-01 5.41995531e-01 1.48073190e-01 2.41160114e-01\n"," 7.42510048e-01 1.82540676e-01 2.71672179e-01 7.37600698e-01\n"," 9.59379350e-01 1.87544829e-01 8.74852182e-01 8.42048697e-01\n"," 4.02842867e-02 8.03095397e-01 6.42240466e-01 6.14265830e-01\n"," 2.04291419e-01 8.26762092e-01 2.27295490e-01 6.25652878e-01\n"," 8.30271867e-01 2.79522180e-01 2.81985776e-01 7.74297548e-01\n"," 9.15107120e-01 5.65531738e-01 2.57219628e-01 7.69772699e-01\n"," 7.06042468e-01 3.74402469e-01 6.89002924e-01 6.30765164e-01\n"," 8.06966970e-01 4.58155760e-01 8.25896630e-01 8.83154885e-02\n"," 9.25572373e-01 8.50165500e-01 4.15339959e-01 3.79066526e-01\n"," 9.87774237e-01 9.34135562e-01 2.77759591e-01 8.15385124e-01\n"," 3.29143664e-01 8.68661929e-02 9.65050731e-02 9.60448305e-01\n"," 8.25172455e-01 3.36120683e-01 7.12379619e-01 3.39933078e-01\n"," 1.14990181e-01 9.04048916e-01 8.16800866e-01 3.94254026e-01\n"," 4.35444259e-01 9.39731910e-01 3.60342382e-01 5.61292450e-01\n"," 8.59570600e-01 3.86598605e-01 7.56510451e-01 7.23413184e-01\n"," 7.68473890e-01 8.12098790e-01 8.62113286e-01 8.79556790e-01\n"," 8.59308586e-01 7.46464647e-01 8.68156160e-01 8.44087854e-01\n"," 7.55561942e-01 3.48874342e-01 9.17797955e-01 1.44865892e-01\n"," 9.18385256e-01 1.81073194e-01 8.44016011e-01 2.46077539e-01\n"," 9.58479883e-01 4.33743332e-01 9.53563817e-01 5.73569889e-01\n"," 6.60158500e-01 6.29126163e-01 8.52787094e-01 7.32573838e-01\n"," 2.15445603e-01 2.75084202e-01 4.20338331e-01 9.32213945e-01\n"," 7.34989811e-02 5.10725391e-01 5.45796378e-01 9.46165121e-01\n"," 7.31408423e-01 2.99914196e-01 7.52262079e-01 4.48508730e-02\n"," 5.47276040e-01 8.21038243e-01 4.49171136e-01 4.72373583e-01\n"," 2.20039958e-01 4.33362409e-01 3.58606923e-02 2.00660666e-01\n"," 9.40819950e-01 3.00613587e-01 1.76668155e-01 8.83025602e-04\n"," 2.57725392e-01 9.75431630e-01 9.47422891e-01 9.67548901e-01\n"," 1.14803057e-01 9.44147095e-01 9.72747249e-01 2.56256471e-01\n"," 9.81444132e-01 1.20727839e-01 2.65058268e-01 1.85376010e-01\n"," 3.04813031e-01 4.17268216e-01 6.22461248e-01 2.50135369e-01\n"," 3.35616273e-01 4.73405970e-01 3.73456216e-01 4.88805394e-01\n"," 6.85111149e-02 8.13337925e-01 7.54042725e-01 8.40704576e-01\n"," 4.49711639e-01 1.39874708e-01 5.80757421e-01 4.22934074e-01\n"," 3.77675167e-01 7.99398706e-01 8.39969536e-01 8.56040274e-02\n"," 4.83080847e-01 6.23640896e-01 6.79429758e-01 4.18804757e-01\n"," 2.26551391e-01 2.75925286e-01 7.69242249e-01 2.21994558e-01\n"," 7.40951393e-01 3.31076423e-01 3.07494240e-01 1.68457666e-01\n"," 5.92974721e-01 8.75756249e-01 2.56865301e-01 6.62730154e-01\n"," 8.48359313e-01 3.01699762e-01 2.78656031e-01 8.62922457e-01\n"," 1.59541624e-01 2.79276234e-01 5.32061901e-01 3.17565915e-01\n"," 6.94947728e-01 8.32593467e-01 6.21242365e-01 5.25064450e-01\n"," 9.20158917e-01 3.67045943e-01 7.36304536e-01 7.58314144e-01\n"," 3.77704003e-01 9.80427044e-01 5.38567470e-01 4.42510813e-01\n"," 9.72859526e-01 3.36931982e-01 3.29859008e-01 3.29724717e-01\n"," 9.92633387e-01 1.10828048e-01 9.95066687e-01 3.46209264e-01\n"," 9.36689400e-01 9.06479277e-01 3.28368683e-01 4.14873751e-01\n"," 5.23913326e-01 8.61544164e-01 1.30567962e-01 6.48302562e-02\n"," 1.83782818e-02 5.46375334e-01 9.98427567e-01 3.73790471e-01\n"," 9.09828609e-01 9.54561729e-01 3.44369873e-01 9.63423245e-01\n"," 3.47384453e-01 5.66752000e-01 7.55780890e-01 6.28626531e-01\n"," 9.94555816e-01 7.61098287e-01 8.41089082e-02 3.49889873e-01\n"," 4.90193295e-01 3.96771816e-01 3.73012832e-01 7.32665114e-01\n"," 4.18340798e-01 9.41246484e-01 6.70502042e-01 9.07545269e-01\n"," 4.52704786e-01 8.16547536e-01 2.05756794e-02 1.03045883e-01\n"," 1.62928821e-03 6.63149012e-02 8.83525855e-01 5.17212541e-01\n"," 8.60483284e-01 6.41494707e-01 7.31052151e-01 2.64580750e-01\n"," 9.63516033e-01 1.85543893e-01 1.71872797e-02 1.69959333e-01\n"," 4.46902390e-01 5.19146265e-01 7.44028455e-01 4.84372939e-01\n"," 6.51867262e-01 6.62515355e-01 7.85259124e-01 9.93718140e-01\n"," 2.90503590e-01 3.39526401e-01 9.09673470e-01 3.10799619e-01\n"," 1.03067550e-01 4.52667718e-01 7.79028719e-01 8.86233990e-01\n"," 8.05193845e-02 8.21248373e-01 2.04613240e-01 9.65263147e-01\n"," 2.85698203e-01 8.23157707e-02 9.86640948e-01 4.02519526e-01\n"," 8.50144153e-01 6.43166434e-01 3.70532404e-01 8.25752623e-01\n"," 5.88920507e-01 1.71405353e-01 2.41256553e-01 9.66040067e-01\n"," 8.30307438e-01 4.15369401e-01 3.76974647e-01 8.58126266e-01\n"," 2.01151376e-01 2.18425383e-01 1.41688250e-02 6.02138991e-01\n"," 7.69978276e-01 5.60121254e-01 6.82607517e-01 8.03651202e-02\n"," 7.83895618e-01 6.68406369e-01 7.60745673e-01 8.29976341e-01\n"," 9.83710072e-01 5.90631979e-01 1.65579632e-01 8.18988600e-02\n"," 1.39181678e-01 5.47545415e-01 3.13820289e-01 5.90356814e-01\n"," 7.63356868e-01 3.93626773e-01 5.36855320e-01 3.35853250e-01\n"," 7.97730520e-01 2.12262957e-01 9.15161761e-01 6.28991123e-01\n"," 1.54932800e-01 6.68325191e-01 2.46517355e-01 9.03050350e-01\n"," 6.69422763e-01 9.47987111e-01 3.44597244e-02 1.13301037e-01\n"," 4.98471264e-01 1.92640884e-01 6.62503152e-01 9.49726425e-01\n"," 2.91377551e-01 2.04239952e-02 8.22232471e-01 9.62208132e-01\n"," 4.24476780e-01 3.72970127e-01 5.52739056e-01 6.13631473e-01\n"," 6.48980413e-01 8.69041800e-02 4.39150196e-01 7.86563006e-01\n"," 3.42729002e-02 6.43764739e-01 1.32368041e-01 8.63360335e-02\n"," 2.79275218e-01 8.75774071e-01 7.16452092e-01 4.82219013e-01\n"," 2.00671707e-01 6.60765331e-01 5.09170672e-01 5.22560778e-01\n"," 4.38931672e-01 3.89107418e-01 6.54967422e-01 6.78343207e-01\n"," 9.40233559e-01 1.98809292e-02 5.31989140e-01 3.44525753e-01\n"," 6.41431544e-01 3.04161083e-01 8.92437925e-01 9.75862309e-01\n"," 3.75919198e-01 5.18779063e-02 2.91274571e-01 5.76628930e-01\n"," 2.43641791e-02 1.57344198e-01 9.39504298e-01 2.43944796e-01\n"," 9.89522282e-01 3.13332068e-01 9.57564960e-01 7.68100437e-01\n"," 8.11758963e-01 9.17643105e-02 8.20059798e-01 3.20781212e-01\n"," 8.79466405e-02 4.54429176e-01 4.03041287e-01 1.83371192e-01\n"," 4.04390065e-01 4.70288315e-01 9.87083268e-01 7.46258034e-01\n"," 5.42659402e-01 2.93477046e-01 1.79858337e-01 2.60383325e-01\n"," 5.23478137e-01 5.54908645e-01 5.13892202e-01 6.54640566e-01\n"," 1.95900734e-01 2.46277850e-01 3.63952859e-01 9.16114818e-01\n"," 6.87734257e-01 7.67456049e-01 4.93633558e-01 9.17053137e-01\n"," 6.95573895e-02 7.09720976e-01 8.05885824e-01 9.34757181e-01\n"," 3.32385305e-01 6.52190043e-01 2.63576361e-01 6.22664682e-01\n"," 6.59776027e-02 1.35591018e-01 9.82085945e-01 6.35638105e-01\n"," 6.58791424e-02 1.74532589e-06 5.91183969e-02 9.02801160e-01\n"," 5.22162974e-01 5.86891036e-01 6.54341955e-02 2.90934200e-01\n"," 6.12368386e-01 3.90936931e-01 9.77714826e-01 2.34062738e-01\n"," 6.69391791e-01 9.56219257e-01 8.76411224e-01 4.38744168e-01\n"," 9.76530906e-01 8.14335620e-01 4.24576063e-01 9.36265138e-01\n"," 2.08339363e-01 6.31512254e-02 7.09548344e-01 9.11424341e-01\n"," 4.03935524e-01 8.36609155e-01 2.74640517e-01 2.45611615e-01\n"," 9.33874514e-01 9.54670281e-01 7.80804001e-01 8.80730197e-01\n"," 4.76569224e-01 6.17966267e-01 6.45759621e-01 4.80940233e-01\n"," 1.66803065e-01 1.30832067e-01 4.94281613e-01 9.83889952e-01\n"," 3.82490161e-01 7.72784211e-01 3.41611023e-01 2.82176149e-01\n"," 8.32083670e-01 1.71012072e-01 4.21755095e-01 6.70943574e-01\n"," 9.82816156e-01 2.58031711e-01 1.56913570e-01 3.11818456e-01\n"," 6.33288340e-01 9.59178821e-01 8.79876795e-01 7.83806363e-02\n"," 5.60946303e-01 1.36292448e-01 4.55458361e-01 8.98526294e-01\n"," 4.06728641e-01 1.22345655e-01 7.38651476e-01 8.83041929e-01\n"," 2.23041046e-01 2.25413616e-01 8.96479221e-01 1.76677188e-01\n"," 7.13599524e-01 5.06061498e-01 5.75524772e-01 5.60171367e-02\n"," 2.72515492e-01 3.50070962e-01 4.16953101e-01 1.17914940e-01\n"," 7.53996651e-01 7.61226102e-01 7.46788590e-01 1.79637415e-01\n"," 1.57065485e-01 8.46239824e-01 5.31138758e-01 5.47470165e-01\n"," 2.44125647e-01 6.34140777e-01 2.63308734e-01 5.84251233e-01\n"," 8.62467533e-01 8.86929963e-01 2.22102846e-01 4.50811978e-01\n"," 3.74997489e-01 7.16934548e-01 2.03984567e-01 8.47923942e-01\n"," 3.86186483e-01 4.76358544e-01 7.09822862e-02 7.42802706e-01\n"," 7.69303147e-01 9.58014874e-01 4.15129742e-01 2.87972878e-01\n"," 2.46205217e-01 5.50838827e-01 8.11954070e-01 3.39864470e-02\n"," 9.41296498e-01 1.26005339e-01 8.52268449e-01 8.41861508e-01\n"," 3.59112601e-01 3.82561469e-01 8.37883237e-01 3.67672203e-01\n"," 7.45198303e-02 3.27464884e-01 2.81136748e-01 3.31496896e-01\n"," 5.77349743e-01 2.94637335e-01 7.08218777e-01 9.23120761e-01\n"," 7.77078936e-01 6.12539060e-01 5.86457430e-01 2.86864341e-01\n"," 5.93171467e-01 4.49577775e-01 4.60839531e-01 7.41037605e-01\n"," 2.45991637e-01 3.06946453e-01 4.62846320e-01 1.16937900e-02\n"," 8.82104874e-01 1.17717122e-01 3.22534418e-01 4.84213778e-01\n"," 2.74976646e-01 6.30522830e-02 8.23634720e-01 9.73851394e-01\n"," 1.35669511e-01 8.48111482e-01 2.85758639e-01 4.34443057e-01\n"," 3.27308049e-01 6.05685002e-01 4.18385089e-01 7.09659825e-01\n"," 7.92070041e-01 7.87322768e-02 4.21071846e-01 3.74761278e-01\n"," 5.37666997e-01 3.20024532e-01 4.91621727e-01 9.22450425e-01\n"," 3.63331060e-01 9.39512061e-01 3.15134577e-01 4.23654722e-01\n"," 4.81522007e-01 5.90934473e-01 2.39244375e-01 9.73212596e-01\n"," 8.85827793e-01 3.53012447e-01 7.79091422e-01 6.39753287e-01\n"," 3.05771775e-01 2.10015735e-01 4.78174093e-01 2.51730462e-01\n"," 9.55942391e-01 9.12943173e-01 5.18569899e-02 4.91092512e-01\n"," 4.98010977e-01 3.42648762e-01 5.77350831e-01 9.71769050e-01\n"," 6.66325702e-01 3.72319652e-01 1.71914737e-01 4.65379467e-01\n"," 9.84496017e-01 7.25894958e-01 7.46327850e-01 2.84661861e-01\n"," 2.64065760e-01 3.79779758e-01 6.10676604e-01 1.46176974e-01\n"," 9.68817542e-01 5.22628187e-01 9.11478676e-01 5.13959368e-01\n"," 8.37144314e-01 4.37743759e-01 1.78543374e-03 8.21330477e-01\n"," 3.50259927e-01 7.05617016e-01 8.29434297e-01 6.95383123e-01\n"," 2.09038965e-01 6.14174430e-01 9.30809670e-01 1.80152414e-01\n"," 6.09495260e-01 4.63708323e-01 4.36560242e-01 4.37597957e-01\n"," 6.32395041e-01 2.25111576e-01 3.97220002e-01 7.69236489e-01\n"," 2.93737269e-01 9.70017658e-01 2.00136165e-01 1.97292638e-01\n"," 3.28541571e-01 6.54520840e-01 9.60489065e-01 5.83180373e-01\n"," 8.17188985e-01 5.35644665e-01 2.78417326e-01 7.80599382e-01\n"," 3.06116901e-01 8.68101979e-01 7.14089991e-02 8.48850011e-01\n"," 7.15762564e-01 6.71793705e-01 4.74306765e-01 7.93205719e-01\n"," 8.24347124e-01 2.24533610e-01 6.54797754e-01 4.91591869e-01\n"," 2.28089099e-01 3.84807640e-01 9.43684819e-01 4.50326978e-01\n"," 1.50391605e-01 9.31609425e-01 1.64345221e-01 5.22875653e-01\n"," 2.61387483e-01 5.45431753e-01 5.96610086e-01 6.10812900e-01\n"," 3.91392247e-01 6.39803767e-01 7.44631863e-01 9.61640177e-01\n"," 8.63087713e-01 9.61966654e-01 7.70506029e-01 7.25961648e-02\n"," 1.74310049e-01 9.74651925e-01 7.74359135e-01 8.65167622e-01\n"," 9.75625536e-01 3.27620739e-01 5.27808349e-01 9.27030161e-01\n"," 6.97747243e-01 2.82842558e-01 9.99561872e-01 6.03938890e-01\n"," 3.65801793e-01 2.40864576e-01 8.46360643e-01 5.51691102e-02\n"," 8.05308585e-01 6.11961374e-01 4.79124730e-01 4.97352580e-01\n"," 8.40197264e-01 4.16135697e-01 4.60694704e-01 1.65343143e-01\n"," 9.37271173e-01 6.25520042e-01 3.28400991e-01 6.93602132e-01\n"," 8.94527627e-01 4.74194018e-01 8.47569324e-01 6.00975313e-01\n"," 3.19503203e-01 3.90145683e-01 3.67714036e-01 1.72021356e-01\n"," 5.67838614e-01 8.01114603e-01 7.21953726e-01 7.13657565e-01\n"," 4.76333216e-02 3.72373149e-01 6.54403888e-01 4.78575219e-01\n"," 3.21526288e-01 2.18915100e-01 5.75735737e-01 7.46679489e-01\n"," 2.37409260e-01 1.67648311e-01 6.22368707e-01 9.78249646e-01\n"," 8.04659708e-01 6.38196035e-01 9.89372031e-01 8.94917969e-01\n"," 6.10694989e-01 4.87354782e-01 6.86924787e-01 1.99036770e-01\n"," 7.14011285e-01 3.60027845e-01 6.41221509e-01 3.40378198e-01\n"," 3.35864473e-01 7.28643062e-01 9.26021017e-01 1.80159453e-01\n"," 7.10117599e-03 9.29770751e-01 4.61021243e-01 7.97924182e-01\n"," 3.24631153e-01 8.74767660e-01 1.63595053e-01 5.34779527e-01\n"," 5.13032740e-01 5.58978447e-01 8.63203515e-01 8.25281566e-01\n"," 2.33603073e-01 1.60246095e-01 3.36624480e-01 7.73929240e-01\n"," 6.88009822e-01 7.61863225e-01 8.62663475e-01 8.46936512e-01\n"," 2.32226225e-01 7.75042368e-01 1.29473495e-01 8.29425275e-01\n"," 9.55483564e-01 5.51885316e-01 4.23264755e-01 5.04821478e-01\n"," 5.99191566e-01 7.89192453e-01 7.71635639e-01 2.92314006e-01]\n","CPU times: user 210 µs, sys: 0 ns, total: 210 µs\n","Wall time: 217 µs\n"]}]},{"cell_type":"markdown","metadata":{"id":"2InIez3ZQlfw"},"source":["### Задание 5\n","Написать функцию для кодирование массива (Run-length encoding). Все подряд повторения элементов функция сжимает в один элемент и считает количество повторений. Функция возвращает кортеж из двух векторов одинаковой длины. Первый содержит элементы, а второй — сколько раз их нужно повторить.\n","\n","Пример: encode(np.array([1, 2, 2, 3, 3, 1, 1, 5, 5, 2, 3, 3])) = (np.array[1, 2, 3, 1, 5, 2, 3]), np.array[1, 2, 2, 2, 2, 1, 2])"]},{"cell_type":"code","metadata":{"id":"3G4DKWeoQlfx","executionInfo":{"status":"ok","timestamp":1702394172771,"user_tz":-300,"elapsed":5,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}}},"source":["# функция, решающая задачу с помощью NumPy\n","def np_encode(a):\n","    result = np.asarray(a)\n","    y = np.array(result[1:] != result[:-1])\n","    i = np.append(np.where(y), len(y) - 1)\n","    z = np.diff(np.append(-1, i))\n","    return(result[i], z)"],"execution_count":92,"outputs":[]},{"cell_type":"code","metadata":{"id":"zMaDQdNBQlf0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702394172771,"user_tz":-300,"elapsed":5,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}},"outputId":"36225d76-f455-4818-f322-0393a42ff0a6"},"source":["from itertools import groupby\n","X = np.array([1, 2, 2, 3, 3, 1, 1, 5, 5, 2, 3, 3])\n","%time x, num = np_encode(X)"],"execution_count":93,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 185 µs, sys: 27 µs, total: 212 µs\n","Wall time: 222 µs\n"]}]},{"cell_type":"markdown","metadata":{"id":"teVCPWZmK7l5"},"source":["### Задание 6\n","\n","Пусть задан некоторый одномерный массив $X$. Надо построить новый массив, где все элементы с нечетными индексами требуется заменить на число $a$ (если оно не указано, то на 1). Все элементы с четными индексами нужно возвести в куб. Затем записать элементы в обратном порядке относительно их позиций. Массив $X$ при этом должен остаться *без изменений*. В конце требуется слить массив X с преобразованным X и вывести в обратном порядке.  \n","\n","Пример:  \n","X = [100, 200, 300, 400, 500] -> [100, a, 300, a, 500] -> [500^3, a, 300^3, a, 100^3] -> склеиваем -> [100, 200, 300, 400, 500, 500^3, a, 300^3, a, 100^3]"]},{"cell_type":"code","metadata":{"id":"0hmcvfDVK7l-","executionInfo":{"status":"ok","timestamp":1702394172771,"user_tz":-300,"elapsed":2,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}}},"source":["# функция, решающая задачу с помощью NumPy\n","from copy import copy\n","\n","def np_transformation(X, a=1):\n","    \"\"\"\n","    param X: array\n","    \"\"\"\n","    result = None\n","    pass\n","    return result"],"execution_count":94,"outputs":[]},{"cell_type":"code","metadata":{"id":"r2-JLMhxK7mE","scrolled":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702394172771,"user_tz":-300,"elapsed":2,"user":{"displayName":"Дмитрий Острожной","userId":"17804520535072720671"}},"outputId":"374cf21d-a230-478e-8901-5950b4a31185"},"source":["X = np.array([i for i in range(1, 10, 2)])\n","# функция должна работать ~ в 20 раз быстрее, чем без Numpy\n","%time S2 = np_transformation(X, 5)"],"execution_count":95,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 37 µs, sys: 0 ns, total: 37 µs\n","Wall time: 40.8 µs\n"]}]}]}